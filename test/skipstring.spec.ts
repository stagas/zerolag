import { SkipString } from '../src/skipstring'

describe('SkipString', () => {
  it('insert', () => {
    let node

    node = new SkipString()
    node.insert(0, '12345')
    expect('12345').toEqual(node.toString())
    node.insert(5, '67890')
    expect('1234567890').toEqual(node.toString())
    node.insert(0, 'ab')
    expect('ab1234567890').toEqual(node.toString())
    node.insert(2, 'cd')
    expect('abcd1234567890').toEqual(node.toString())
    node.insert(9, 'ef')
    expect('abcd12345ef67890').toEqual(node.toString())

    node = new SkipString()
    node.insert(0, '12345')
    expect('12345').toEqual(node.toString())
    node.insert(2, 'ab')
    expect('12ab345').toEqual(node.toString())
  })

  it('remove', () => {
    let node

    node = new SkipString()
    node.insert(0, 'efgh')
    node.insert(0, 'abcd')
    node.insert(0, '890')
    node.insert(0, '567')
    node.insert(0, '34')
    node.insert(0, '12')
    node.remove([5, 12])
    expect('12345cdefgh').toEqual(node.toString())

    node = new SkipString()
    node.insert(0, 'efgh')
    node.insert(0, 'abcd')
    node.insert(0, '890')
    node.insert(0, '567')
    node.insert(0, '34')
    node.insert(0, '12')
    node.remove([4, 12])
    expect('1234cdefgh').toEqual(node.toString())

    node = new SkipString()
    node.insert(0, 'efgh')
    node.insert(0, 'abcd')
    node.insert(0, '890')
    node.insert(0, '567')
    node.insert(0, '34')
    node.insert(0, '12')
    node.remove([6, 13])
    expect('123456defgh').toEqual(node.toString())

    node = new SkipString()
    node.insert(0, 'efgh')
    node.insert(0, 'abcd')
    node.insert(0, '890')
    node.insert(0, '567')
    node.insert(0, '34')
    node.insert(0, '12')
    node.remove([2, 14])
    expect('12efgh').toEqual(node.toString())

    node = new SkipString()
    node.insert(0, 'efgh', 5)
    node.insert(0, 'abcd')
    node.insert(0, '890')
    node.insert(0, '567', 7)
    node.insert(0, '34')
    node.insert(0, '12')
    node.remove([1, 16])
    expect('1gh').toEqual(node.toString())

    node = new SkipString()
    node.insert(0, 'efgh', 3)
    node.insert(0, 'abcd')
    node.insert(0, '890')
    node.insert(0, '567', 7)
    node.insert(0, '34')
    node.insert(0, '12')
    node.remove([0, 18])
    expect('').toEqual(node.toString())

    node = new SkipString()
    node.insert(0, 'efgh', 3)
    node.insert(0, 'abcd', 1)
    node.insert(0, '890', 1)
    node.insert(0, '567', 7)
    node.insert(0, '34', 1)
    node.insert(0, '12', 2)
    node.remove([0, 15])
    expect('fgh').toEqual(node.toString())
  })

  it('removeCharAt', () => {
    let node
    node = new SkipString()
    node.insert(0, 'efgh')
    node.insert(0, 'abcd')
    node.insert(0, '890')
    node.insert(0, '567')
    node.insert(0, '34')
    node.insert(0, '12')
    expect('1234567890abcdefgh').toEqual(node.toString())
    node.removeCharAt(2)
    expect('124567890abcdefgh').toEqual(node.toString())
    node.removeCharAt(5)
    expect('12456890abcdefgh').toEqual(node.toString())
    node.removeCharAt(5)
    expect('1245690abcdefgh').toEqual(node.toString())
    node.removeCharAt(5)
    expect('124560abcdefgh').toEqual(node.toString())
    node.removeCharAt(5)
    expect('12456abcdefgh').toEqual(node.toString())

    node = new SkipString()
    node.insert(0, '9012')
    node.insert(0, '5678')
    node.insert(0, '1234')
    expect('123456789012').toEqual(node.toString())
    node.removeCharAt(11)
    expect('12345678901').toEqual(node.toString())
    node.removeCharAt(5)
    expect('1234578901').toEqual(node.toString())
    node.removeCharAt(2)
    expect('124578901').toEqual(node.toString())
    node.removeCharAt(1)
    expect('14578901').toEqual(node.toString())
    node.removeCharAt(7)
    expect('1457890').toEqual(node.toString())
  })

  it('substring', () => {
    const node = new SkipString()
    node.insert(0, '12345')
    node.insert(5, '67890')
    node.insert(0, 'ab')
    node.insert(2, 'cd')
    node.insert(9, 'ef')
    expect('abcd12345ef67890').toEqual(node.substring(0, node.length))

    expect('ab').toEqual(node.substring(0, 2))
    expect('cd').toEqual(node.substring(2, 4))
    expect('d1').toEqual(node.substring(3, 5))
    expect('cd12').toEqual(node.substring(2, 6))
    expect('f678').toEqual(node.substring(10, 14))
    expect('67890').toEqual(node.substring(11, 16))
    expect('7890').toEqual(node.substring(12, node.length))
  })

  it('insertChunked', () => {
    let node
    for (let i = 1; i < 10; i++) {
      node = new SkipString()
      node.insertChunked(0, '1234567890123') //, i)
      // expect('123,456,789,012,3').toEqual(node.joinString());
      expect('123').toEqual(node.getRange([0, 3]))
      expect('456').toEqual(node.getRange([3, 6]))
      expect('789').toEqual(node.getRange([6, 9]))
      expect('012').toEqual(node.getRange([9, 12]))
      expect('12').toEqual(node.getRange([0, 2]))
      expect('1234').toEqual(node.getRange([0, 4]))
      expect('12345').toEqual(node.getRange([0, 5]))
      expect('123456').toEqual(node.getRange([0, 6]))
      expect('1234567').toEqual(node.getRange([0, 7]))
      expect('12345678').toEqual(node.getRange([0, 8]))
      expect('123456789').toEqual(node.getRange([0, 9]))
      expect('1234567890').toEqual(node.getRange([0, 10]))
      expect('12345678901').toEqual(node.getRange([0, 11]))
      expect('123456789012').toEqual(node.getRange([0, 12]))
      expect('1234567890123').toEqual(node.getRange([0, 13]))
      expect('1234567890123').toEqual(node.getRange([0, 14]))
      expect('234').toEqual(node.getRange([1, 4]))
      expect('2345').toEqual(node.getRange([1, 5]))
      expect('23456').toEqual(node.getRange([1, 6]))
      expect('234567').toEqual(node.getRange([1, 7]))
      expect('2345678').toEqual(node.getRange([1, 8]))
      expect('23456789').toEqual(node.getRange([1, 9]))
      expect('234567890').toEqual(node.getRange([1, 10]))
      expect('2345678901').toEqual(node.getRange([1, 11]))
      expect('23456789012').toEqual(node.getRange([1, 12]))
      expect('234567890123').toEqual(node.getRange([1, 13]))
      expect('234567890123').toEqual(node.getRange([1, 14]))
      expect('34').toEqual(node.getRange([2, 4]))
      expect('345').toEqual(node.getRange([2, 5]))
      expect('3456').toEqual(node.getRange([2, 6]))
      expect('34567').toEqual(node.getRange([2, 7]))
      expect('345678').toEqual(node.getRange([2, 8]))
      expect('3456789').toEqual(node.getRange([2, 9]))
      expect('34567890').toEqual(node.getRange([2, 10]))
      expect('345678901').toEqual(node.getRange([2, 11]))
      expect('3456789012').toEqual(node.getRange([2, 12]))
      expect('34567890123').toEqual(node.getRange([2, 13]))
      expect('34567890123').toEqual(node.getRange([2, 14]))
      expect('4').toEqual(node.getRange([3, 4]))
      expect('45').toEqual(node.getRange([3, 5]))
      expect('456').toEqual(node.getRange([3, 6]))
      expect('4567').toEqual(node.getRange([3, 7]))
      expect('45678').toEqual(node.getRange([3, 8]))
      expect('456789').toEqual(node.getRange([3, 9]))
      expect('4567890').toEqual(node.getRange([3, 10]))
      expect('45678901').toEqual(node.getRange([3, 11]))
      expect('456789012').toEqual(node.getRange([3, 12]))
      expect('4567890123').toEqual(node.getRange([3, 13]))
      expect('4567890123').toEqual(node.getRange([3, 14]))

      // node.insert(0, '0')
      // node.insert(0, '0')
      // expect('001234567890123').toEqual(node.toString())
      // node.removeCharAt(0)
      // expect('01234567890123').toEqual(node.toString())
      // node.removeCharAt(5)
      // expect('0123467890123').toEqual(node.toString())
      expect('1234567890123').toEqual(node.toString())
      node.removeCharAt(0)
      expect('234567890123').toEqual(node.toString())
      node.removeCharAt(2)
      expect('23567890123').toEqual(node.toString())

      node.insert(5, '1')
      node.insert(6, '2')
      node.insert(7, '3')
      node.insert(8, '4')
      // node.removeCharAt(1)
      // expect('01234567890123').toEqual(node.toString())
      // expect('12345').toEqual(node.get(0).node.value)
      // expect('67890').toEqual(node.get(5).node.value)
      // expect(0).toEqual(node.get(5).offset)
      // expect('123').toEqual(node.get(10).node.value)
      // expect(0).toEqual(node.get(10).offset)
    }
  })

  it('gap insert', () => {
    const node = new SkipString()
    node.insert(5, 'foo')
    expect(null).toEqual(node.get(4).node.value)
    expect('foo').toEqual(node.get(5).node.value)
    node.insert(15, 'bar')
    expect('foo').toEqual(node.get(14).node.value)
    expect('bar').toEqual(node.get(15).node.value)
    node.insert(9, 'zoo')
    expect('zoo').toEqual(node.get(14).node.value)
    expect('zoo').toEqual(node.get(15).node.value)
    expect('bar').toEqual(node.get(18).node.value)
    node.insert(11, 'r')
    expect('zoro').toEqual(node.get(14).node.value)
    node.insert(50, 'x')
    expect('x').toEqual(node.get(50).node.value)
    node.insert(100, 'y')
    expect('foo').toEqual(node.get(5).node.value)
    expect('zoro').toEqual(node.get(9).node.value)
    expect('x').toEqual(node.get(50).node.value)
    expect('y').toEqual(node.get(100).node.value)
    node.insert(200, 'z')
    expect('foo').toEqual(node.get(5).node.value)
    expect('zoro').toEqual(node.get(9).node.value)
    expect('x').toEqual(node.get(50).node.value)
    expect('y').toEqual(node.get(100).node.value)
    expect('z').toEqual(node.get(200).node.value)
  })
})
